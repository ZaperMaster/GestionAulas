package com.alejandronieves.controller;

import com.alejandronieves.model.Aula;
import com.alejandronieves.model.Planta;
import com.alejandronieves.service.AulaService;
import com.alejandronieves.service.EdificioService;
import com.alejandronieves.service.PlantaService;
import com.alejandronieves.service.TipoAulaService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Controller
@RequestMapping("/aulas")
public class AulaController {

    @Autowired
    private AulaService aulaService;

    @Autowired
    private EdificioService edificioService;

    @Autowired
    private PlantaService plantaService;

    @Autowired
    private TipoAulaService tipoAulaService;

    // Listar todas las aulas
    @GetMapping
    public String listarAulas(Model model) {
        model.addAttribute("aulas", aulaService.listAll());
        return "aulas_list";
    }

    // Mostrar formulario para crear una nueva aula
    @GetMapping("/nuevo")
    public String nuevaAula(Model model) {
        model.addAttribute("aula", new Aula());
        model.addAttribute("edificios", edificioService.listAll());
        // Inicialmente no se cargan plantas hasta que se seleccione un edificio
        model.addAttribute("plantas", List.of());
        model.addAttribute("tipoAulas", tipoAulaService.listAll());
        return "aula_form";
    }

    // Procesar el formulario para crear/editar aula
    @PostMapping
    public String guardarAula(@ModelAttribute("aula") Aula aula, BindingResult result, Model model) {
        if (result.hasErrors()) {
            model.addAttribute("edificios", edificioService.listAll());
            // Si el aula ya tiene una planta asignada, se cargan las plantas del edificio correspondiente
            if (aula.getPlanta() != null && aula.getPlanta().getEdificio() != null) {
                model.addAttribute("plantas", plantaService.findByEdificio(aula.getPlanta().getEdificio().getId()));
            } else {
                model.addAttribute("plantas", List.of());
            }
            model.addAttribute("tipoAulas", tipoAulaService.listAll());
            return "aula_form";
        }
        aulaService.save(aula);
        return "redirect:/aulas";
    }

    // Mostrar formulario para editar un aula existente
    @GetMapping("/editar/{id}")
    public String editarAula(@PathVariable("id") Long id, Model model) {
        Aula aula = aulaService.findById(id);
        if (aula == null) {
            return "redirect:/aulas";
        }
        model.addAttribute("aula", aula);
        model.addAttribute("edificios", edificioService.listAll());
        // Si el aula tiene una planta asignada, cargar solo las plantas de su edificio
        if (aula.getPlanta() != null && aula.getPlanta().getEdificio() != null) {
            model.addAttribute("plantas", plantaService.findByEdificio(aula.getPlanta().getEdificio().getId()));
        } else {
            model.addAttribute("plantas", List.of());
        }
        model.addAttribute("tipoAulas", tipoAulaService.listAll());
        return "aula_form";
    }

    // Borrar un aula
    @GetMapping("/borrar/{id}")
    public String borrarAula(@PathVariable("id") Long id) {
        aulaService.deleteById(id);
        return "redirect:/aulas";
    }

    // Endpoint AJAX para obtener plantas seg√∫n el edificio seleccionado
    @GetMapping("/plantasPorEdificio")
    @ResponseBody
    public List<Planta> getPlantasPorEdificio(@RequestParam("edificioId") Long edificioId) {
        List<Planta> plantas = plantaService.findByEdificio(edificioId);
        System.out.println("Plantas encontradas para edificio " + edificioId + ": " + plantas.size());
        return plantas;
    }
}
